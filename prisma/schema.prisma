generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // postgresql://USER:PASSWORD@HOST:PORT/DATABASE
  url      = env("DATABASE_URL")
}

model GameData {
  id   Int  @id
  data Json

  // relations

  loadoutMirrorWeapon     LoadoutMirror[] @relation("loadoutMirrorWeapon")
  loadoutMirrorHeadPiece  LoadoutMirror[] @relation("loadoutMirrorHeadPiece")
  loadoutMirrorChestPiece LoadoutMirror[] @relation("loadoutMirrorChestPiece")
  loadoutMirrorArmPiece   LoadoutMirror[] @relation("loadoutMirrorArmPiece")
  loadoutMirrorWaistPiece LoadoutMirror[] @relation("loadoutMirrorWaistPiece")
  loadoutMirrorLegPiece   LoadoutMirror[] @relation("loadoutMirrorLegPiece")
  loadoutMirrorKinsect    LoadoutMirror[] @relation("loadoutMirrorKinsect")
  loadoutMirrorPetalace   LoadoutMirror[] @relation("loadoutMirrorPetalace")
}

model LoadoutMirror {
  id           String @id @default(cuid())
  title        String
  savePosition Int

  user   User   @relation(fields: [userId], references: [id])
  userId String
  weapon       GameData  @relation("loadoutMirrorWeapon", fields: [weaponId], references: [id])
  weaponId     Int
  headPiece    GameData?  @relation("loadoutMirrorHeadPiece", fields: [headPieceId], references: [id])
  headPieceId  Int?
  chestPiece   GameData?  @relation("loadoutMirrorChestPiece", fields: [chestPieceId], references: [id])
  chestPieceId Int?
  armPiece     GameData?  @relation("loadoutMirrorArmPiece", fields: [armPieceId], references: [id])
  armPieceId   Int?
  waistPiece   GameData?  @relation("loadoutMirrorWaistPiece", fields: [waistPieceId], references: [id])
  waistPieceId Int?
  legPiece     GameData?  @relation("loadoutMirrorLegPiece", fields: [legPieceId], references: [id])
  legPieceId   Int?
  kinsect      GameData? @relation("loadoutMirrorKinsect", fields: [kinsectId], references: [id])
  kinsectId    Int?
  petalace     GameData?  @relation("loadoutMirrorPetalace", fields: [petalaceId], references: [id])
  petalaceId   Int?
  talisman     Talisman? @relation(fields: [talismanId], references: [id])
  talismanId   String?
}

model Talisman {
  id            String          @id @default(cuid())
  skill1        Int
  skill1Level   Int
  skill2        Int?
  skill2Level   Int?
  slotSize1     Int?
  slotSize2     Int?
  slotSize3     Int?

  LoadoutMirror LoadoutMirror[]
}

// Table for auth below
// This is copied from https://next-auth.js.org/adapters/prisma

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_in        Int? // add expires_at Int? - if you are using Github
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // from prisma
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // custom
  number Int

  loadoutMirrors LoadoutMirror[]

  @@unique([name, number])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
