generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // postgresql://USER:PASSWORD@HOST:PORT/DATABASE
  url      = env("DATABASE_URL")
}

model GameData {
  id   Int  @id
  data Json

  loadoutMirrorWeapon     MirroredLoadout[] @relation("loadoutMirrorWeapon")
  loadoutMirrorHeadPiece  MirroredLoadout[] @relation("loadoutMirrorHeadPiece")
  loadoutMirrorChestPiece MirroredLoadout[] @relation("loadoutMirrorChestPiece")
  loadoutMirrorArmPiece   MirroredLoadout[] @relation("loadoutMirrorArmPiece")
  loadoutMirrorWaistPiece MirroredLoadout[] @relation("loadoutMirrorWaistPiece")
  loadoutMirrorLegPiece   MirroredLoadout[] @relation("loadoutMirrorLegPiece")
  loadoutMirrorKinsect    MirroredLoadout[] @relation("loadoutMirrorKinsect")
  loadoutMirrorPetalace   MirroredLoadout[] @relation("loadoutMirrorPetalace")

  publishedLoadoutWeapon     PublishedLoadout[] @relation("publishedLoadoutWeapon")
  publishedLoadoutHeadPiece  PublishedLoadout[] @relation("publishedLoadoutHeadPiece")
  publishedLoadoutChestPiece PublishedLoadout[] @relation("publishedLoadoutChestPiece")
  publishedLoadoutArmPiece   PublishedLoadout[] @relation("publishedLoadoutArmPiece")
  publishedLoadoutWaistPiece PublishedLoadout[] @relation("publishedLoadoutWaistPiece")
  publishedLoadoutLegPiece   PublishedLoadout[] @relation("publishedLoadoutLegPiece")
  publishedLoadoutKinsect    PublishedLoadout[] @relation("publishedLoadoutKinsect")
  publishedLoadoutPetalace   PublishedLoadout[] @relation("publishedLoadoutPetalace")

  MirroredSlotting  MirroredSlotting[]
  PublishedSlotting PublishedSlotting[]
}

model Talisman {
  id        Int   @id @default(autoincrement())
  slotSizes Int[]

  MirroredLoadout  MirroredLoadout[]
  PublishedLoadout PublishedLoadout[]
  Skill            Skill[]
  TalismanToSkill  TalismanToSkill[]
}

model TalismanToSkill {
  id         String @id @default(cuid())
  skillLevel Int

  talisman   Talisman @relation(fields: [talismanId], references: [id], onDelete: Cascade)
  talismanId Int
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    Int
}

model Decoration {
  id       Int    @id
  name     String
  rarity   Int
  slotSize Int

  MirroredSlotting  MirroredSlotting[]
  PublishedSlotting PublishedSlotting[]
  DecorationToSkill DecorationToSkill[]
}

model DecorationToSkill {
  id         String @id @default(cuid())
  skillLevel Int

  decoration   Decoration @relation(fields: [decorationId], references: [id])
  decorationId Int
  skill        Skill      @relation(fields: [skillId], references: [id])
  skillId      Int
}

model Skill {
  id         Int       @id @default(autoincrement())
  name       String
  Talisman   Talisman? @relation(fields: [talismanId], references: [id])
  talismanId Int?

  TalismanToSkill   TalismanToSkill[]
  DecorationToSkill DecorationToSkill[]
}

model MirroredLoadout {
  id       Int    @id @default(autoincrement())
  title    String
  saveSlot Int

  user         User      @relation(fields: [userId], references: [id])
  userId       String
  weapon       GameData  @relation("loadoutMirrorWeapon", fields: [weaponId], references: [id])
  weaponId     Int
  headPiece    GameData? @relation("loadoutMirrorHeadPiece", fields: [headPieceId], references: [id])
  headPieceId  Int?
  chestPiece   GameData? @relation("loadoutMirrorChestPiece", fields: [chestPieceId], references: [id])
  chestPieceId Int?
  armPiece     GameData? @relation("loadoutMirrorArmPiece", fields: [armPieceId], references: [id])
  armPieceId   Int?
  waistPiece   GameData? @relation("loadoutMirrorWaistPiece", fields: [waistPieceId], references: [id])
  waistPieceId Int?
  legPiece     GameData? @relation("loadoutMirrorLegPiece", fields: [legPieceId], references: [id])
  legPieceId   Int?
  kinsect      GameData? @relation("loadoutMirrorKinsect", fields: [kinsectId], references: [id])
  kinsectId    Int?
  petalace     GameData? @relation("loadoutMirrorPetalace", fields: [petalaceId], references: [id])
  petalaceId   Int?
  talisman     Talisman? @relation(fields: [talismanId], references: [id])
  talismanId   Int?

  MirroredSlotting MirroredSlotting[]

  @@unique([userId, saveSlot])
}

model PublishedLoadout {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  publishTimestamp DateTime

  user         User      @relation(fields: [userId], references: [id])
  userId       String
  weapon       GameData  @relation("publishedLoadoutWeapon", fields: [weaponId], references: [id])
  weaponId     Int
  headPiece    GameData? @relation("publishedLoadoutHeadPiece", fields: [headPieceId], references: [id])
  headPieceId  Int?
  chestPiece   GameData? @relation("publishedLoadoutChestPiece", fields: [chestPieceId], references: [id])
  chestPieceId Int?
  armPiece     GameData? @relation("publishedLoadoutArmPiece", fields: [armPieceId], references: [id])
  armPieceId   Int?
  waistPiece   GameData? @relation("publishedLoadoutWaistPiece", fields: [waistPieceId], references: [id])
  waistPieceId Int?
  legPiece     GameData? @relation("publishedLoadoutLegPiece", fields: [legPieceId], references: [id])
  legPieceId   Int?
  kinsect      GameData? @relation("publishedLoadoutKinsect", fields: [kinsectId], references: [id])
  kinsectId    Int?
  petalace     GameData? @relation("publishedLoadoutPetalace", fields: [petalaceId], references: [id])
  petalaceId   Int?
  talisman     Talisman? @relation(fields: [talismanId], references: [id])
  talismanId   Int?

  PublishedSlotting PublishedSlotting[]
}

model MirroredSlotting {
  id Int @id @default(autoincrement())

  mirroredLoadout   MirroredLoadout @relation(fields: [mirroredLoadoutId], references: [id], onDelete: Cascade)
  mirroredLoadoutId Int
  gear              GameData        @relation(fields: [gearId], references: [id])
  gearId            Int
  decoration        Decoration      @relation(fields: [decorationId], references: [id])
  decorationId      Int
}

model PublishedSlotting {
  id Int @id @default(autoincrement())

  publishedLoadout   PublishedLoadout @relation(fields: [publishedLoadoutId], references: [id])
  publishedLoadoutId Int
  gear               GameData         @relation(fields: [gearId], references: [id])
  gearId             Int
  decoration         Decoration       @relation(fields: [decorationId], references: [id])
  decorationId       Int
}

// ----------------   Table for auth below   ----------------

// This is copied from https://next-auth.js.org/adapters/prisma

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_in        Int? // add expires_at Int? - if you are using Github
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // from prisma
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // custom
  numberTag Int

  loadoutMirrors    MirroredLoadout[]
  publishedLoadouts PublishedLoadout[]

  @@unique([name, numberTag])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
